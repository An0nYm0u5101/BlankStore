/*
 * Copyright (c) 2014 Î¼g Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Instruments.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.*;
import static com.squareup.wire.Message.Label.REPEATED;

public final class UpdateInstrumentResponse extends Message {

  public static final Integer DEFAULT_RESULT = 0;
  public static final String DEFAULT_INSTRUMENTID = "";
  public static final String DEFAULT_USERMESSAGEHTML = "";
  public static final List<InputValidationError> DEFAULT_ERRORINPUTFIELD = Collections.emptyList();
  public static final Boolean DEFAULT_CHECKOUTTOKENREQUIRED = false;

  @ProtoField(tag = 1, type = INT32)
  public final Integer result;

  @ProtoField(tag = 2, type = STRING)
  public final String instrumentId;

  @ProtoField(tag = 3, type = STRING)
  public final String userMessageHtml;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<InputValidationError> errorInputField;

  @ProtoField(tag = 5, type = BOOL)
  public final Boolean checkoutTokenRequired;

  @ProtoField(tag = 6)
  public final RedeemedPromoOffer redeemedOffer;

  public UpdateInstrumentResponse(Integer result, String instrumentId, String userMessageHtml, List<InputValidationError> errorInputField, Boolean checkoutTokenRequired, RedeemedPromoOffer redeemedOffer) {
    this.result = result;
    this.instrumentId = instrumentId;
    this.userMessageHtml = userMessageHtml;
    this.errorInputField = immutableCopyOf(errorInputField);
    this.checkoutTokenRequired = checkoutTokenRequired;
    this.redeemedOffer = redeemedOffer;
  }

  private UpdateInstrumentResponse(Builder builder) {
    this(builder.result, builder.instrumentId, builder.userMessageHtml, builder.errorInputField, builder.checkoutTokenRequired, builder.redeemedOffer);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UpdateInstrumentResponse)) return false;
    UpdateInstrumentResponse o = (UpdateInstrumentResponse) other;
    return equals(result, o.result)
        && equals(instrumentId, o.instrumentId)
        && equals(userMessageHtml, o.userMessageHtml)
        && equals(errorInputField, o.errorInputField)
        && equals(checkoutTokenRequired, o.checkoutTokenRequired)
        && equals(redeemedOffer, o.redeemedOffer);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = this.result != null ? this.result.hashCode() : 0;
      result = result * 37 + (instrumentId != null ? instrumentId.hashCode() : 0);
      result = result * 37 + (userMessageHtml != null ? userMessageHtml.hashCode() : 0);
      result = result * 37 + (errorInputField != null ? errorInputField.hashCode() : 1);
      result = result * 37 + (checkoutTokenRequired != null ? checkoutTokenRequired.hashCode() : 0);
      result = result * 37 + (redeemedOffer != null ? redeemedOffer.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UpdateInstrumentResponse> {

    public Integer result;
    public String instrumentId;
    public String userMessageHtml;
    public List<InputValidationError> errorInputField;
    public Boolean checkoutTokenRequired;
    public RedeemedPromoOffer redeemedOffer;

    public Builder() {
    }

    public Builder(UpdateInstrumentResponse message) {
      super(message);
      if (message == null) return;
      this.result = message.result;
      this.instrumentId = message.instrumentId;
      this.userMessageHtml = message.userMessageHtml;
      this.errorInputField = copyOf(message.errorInputField);
      this.checkoutTokenRequired = message.checkoutTokenRequired;
      this.redeemedOffer = message.redeemedOffer;
    }

    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    public Builder instrumentId(String instrumentId) {
      this.instrumentId = instrumentId;
      return this;
    }

    public Builder userMessageHtml(String userMessageHtml) {
      this.userMessageHtml = userMessageHtml;
      return this;
    }

    public Builder errorInputField(List<InputValidationError> errorInputField) {
      this.errorInputField = checkForNulls(errorInputField);
      return this;
    }

    public Builder checkoutTokenRequired(Boolean checkoutTokenRequired) {
      this.checkoutTokenRequired = checkoutTokenRequired;
      return this;
    }

    public Builder redeemedOffer(RedeemedPromoOffer redeemedOffer) {
      this.redeemedOffer = redeemedOffer;
      return this;
    }

    @Override
    public UpdateInstrumentResponse build() {
      return new UpdateInstrumentResponse(this);
    }
  }
}
