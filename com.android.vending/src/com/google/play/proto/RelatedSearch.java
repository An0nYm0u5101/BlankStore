/*
 * Copyright (c) 2014 Î¼g Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Search.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.*;

public final class RelatedSearch extends Message {

  public static final String DEFAULT_SEARCHURL = "";
  public static final String DEFAULT_HEADER = "";
  public static final Integer DEFAULT_BACKENDID = 0;
  public static final Integer DEFAULT_DOCTYPE = 0;
  public static final Boolean DEFAULT_CURRENT = false;

  @ProtoField(tag = 1, type = STRING)
  public final String searchUrl;

  @ProtoField(tag = 2, type = STRING)
  public final String header;

  @ProtoField(tag = 3, type = INT32)
  public final Integer backendId;

  @ProtoField(tag = 4, type = INT32)
  public final Integer docType;

  @ProtoField(tag = 5, type = BOOL)
  public final Boolean current;

  public RelatedSearch(String searchUrl, String header, Integer backendId, Integer docType, Boolean current) {
    this.searchUrl = searchUrl;
    this.header = header;
    this.backendId = backendId;
    this.docType = docType;
    this.current = current;
  }

  private RelatedSearch(Builder builder) {
    this(builder.searchUrl, builder.header, builder.backendId, builder.docType, builder.current);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RelatedSearch)) return false;
    RelatedSearch o = (RelatedSearch) other;
    return equals(searchUrl, o.searchUrl)
        && equals(header, o.header)
        && equals(backendId, o.backendId)
        && equals(docType, o.docType)
        && equals(current, o.current);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = searchUrl != null ? searchUrl.hashCode() : 0;
      result = result * 37 + (header != null ? header.hashCode() : 0);
      result = result * 37 + (backendId != null ? backendId.hashCode() : 0);
      result = result * 37 + (docType != null ? docType.hashCode() : 0);
      result = result * 37 + (current != null ? current.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<RelatedSearch> {

    public String searchUrl;
    public String header;
    public Integer backendId;
    public Integer docType;
    public Boolean current;

    public Builder() {
    }

    public Builder(RelatedSearch message) {
      super(message);
      if (message == null) return;
      this.searchUrl = message.searchUrl;
      this.header = message.header;
      this.backendId = message.backendId;
      this.docType = message.docType;
      this.current = message.current;
    }

    public Builder searchUrl(String searchUrl) {
      this.searchUrl = searchUrl;
      return this;
    }

    public Builder header(String header) {
      this.header = header;
      return this;
    }

    public Builder backendId(Integer backendId) {
      this.backendId = backendId;
      return this;
    }

    public Builder docType(Integer docType) {
      this.docType = docType;
      return this;
    }

    public Builder current(Boolean current) {
      this.current = current;
      return this;
    }

    @Override
    public RelatedSearch build() {
      return new RelatedSearch(this);
    }
  }
}
