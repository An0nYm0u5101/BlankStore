/*
 * Copyright (c) 2014 Î¼g Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.*;
import static com.squareup.wire.Message.Label.REPEATED;

public final class DocV2 extends Message {

  public static final String DEFAULT_DOCID = "";
  public static final String DEFAULT_BACKENDDOCID = "";
  public static final Integer DEFAULT_DOCTYPE = 0;
  public static final Integer DEFAULT_BACKENDID = 0;
  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_CREATOR = "";
  public static final String DEFAULT_DESCRIPTIONHTML = "";
  public static final List<Offer> DEFAULT_OFFER = Collections.emptyList();
  public static final List<Image> DEFAULT_IMAGE = Collections.emptyList();
  public static final List<DocV2> DEFAULT_CHILD = Collections.emptyList();
  public static final String DEFAULT_DETAILSURL = "";
  public static final String DEFAULT_SHAREURL = "";
  public static final String DEFAULT_REVIEWSURL = "";
  public static final String DEFAULT_BACKENDURL = "";
  public static final String DEFAULT_PURCHASEDETAILSURL = "";
  public static final Boolean DEFAULT_DETAILSREUSABLE = false;
  public static final String DEFAULT_SUBTITLE = "";

  @ProtoField(tag = 1, type = STRING)
  public final String docid;

  @ProtoField(tag = 2, type = STRING)
  public final String backendDocid;

  @ProtoField(tag = 3, type = INT32)
  public final Integer docType;

  @ProtoField(tag = 4, type = INT32)
  public final Integer backendId;

  @ProtoField(tag = 5, type = STRING)
  public final String title;

  @ProtoField(tag = 6, type = STRING)
  public final String creator;

  @ProtoField(tag = 7, type = STRING)
  public final String descriptionHtml;

  @ProtoField(tag = 8, label = REPEATED)
  public final List<Offer> offer;

  @ProtoField(tag = 9)
  public final Availability availability;

  @ProtoField(tag = 10, label = REPEATED)
  public final List<Image> image;

  @ProtoField(tag = 11, label = REPEATED)
  public final List<DocV2> child;

  @ProtoField(tag = 12)
  public final ContainerMetadata containerMetadata;

  @ProtoField(tag = 13)
  public final DocumentDetails details;

  @ProtoField(tag = 14)
  public final AggregateRating aggregateRating;

  @ProtoField(tag = 15)
  public final Annotations annotations;

  @ProtoField(tag = 16, type = STRING)
  public final String detailsUrl;

  @ProtoField(tag = 17, type = STRING)
  public final String shareUrl;

  @ProtoField(tag = 18, type = STRING)
  public final String reviewsUrl;

  @ProtoField(tag = 19, type = STRING)
  public final String backendUrl;

  @ProtoField(tag = 20, type = STRING)
  public final String purchaseDetailsUrl;

  @ProtoField(tag = 21, type = BOOL)
  public final Boolean detailsReusable;

  @ProtoField(tag = 22, type = STRING)
  public final String subtitle;

  public DocV2(String docid, String backendDocid, Integer docType, Integer backendId, String title, String creator, String descriptionHtml, List<Offer> offer, Availability availability, List<Image> image, List<DocV2> child, ContainerMetadata containerMetadata, DocumentDetails details, AggregateRating aggregateRating, Annotations annotations, String detailsUrl, String shareUrl, String reviewsUrl, String backendUrl, String purchaseDetailsUrl, Boolean detailsReusable, String subtitle) {
    this.docid = docid;
    this.backendDocid = backendDocid;
    this.docType = docType;
    this.backendId = backendId;
    this.title = title;
    this.creator = creator;
    this.descriptionHtml = descriptionHtml;
    this.offer = immutableCopyOf(offer);
    this.availability = availability;
    this.image = immutableCopyOf(image);
    this.child = immutableCopyOf(child);
    this.containerMetadata = containerMetadata;
    this.details = details;
    this.aggregateRating = aggregateRating;
    this.annotations = annotations;
    this.detailsUrl = detailsUrl;
    this.shareUrl = shareUrl;
    this.reviewsUrl = reviewsUrl;
    this.backendUrl = backendUrl;
    this.purchaseDetailsUrl = purchaseDetailsUrl;
    this.detailsReusable = detailsReusable;
    this.subtitle = subtitle;
  }

  private DocV2(Builder builder) {
    this(builder.docid, builder.backendDocid, builder.docType, builder.backendId, builder.title, builder.creator, builder.descriptionHtml, builder.offer, builder.availability, builder.image, builder.child, builder.containerMetadata, builder.details, builder.aggregateRating, builder.annotations, builder.detailsUrl, builder.shareUrl, builder.reviewsUrl, builder.backendUrl, builder.purchaseDetailsUrl, builder.detailsReusable, builder.subtitle);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DocV2)) return false;
    DocV2 o = (DocV2) other;
    return equals(docid, o.docid)
        && equals(backendDocid, o.backendDocid)
        && equals(docType, o.docType)
        && equals(backendId, o.backendId)
        && equals(title, o.title)
        && equals(creator, o.creator)
        && equals(descriptionHtml, o.descriptionHtml)
        && equals(offer, o.offer)
        && equals(availability, o.availability)
        && equals(image, o.image)
        && equals(child, o.child)
        && equals(containerMetadata, o.containerMetadata)
        && equals(details, o.details)
        && equals(aggregateRating, o.aggregateRating)
        && equals(annotations, o.annotations)
        && equals(detailsUrl, o.detailsUrl)
        && equals(shareUrl, o.shareUrl)
        && equals(reviewsUrl, o.reviewsUrl)
        && equals(backendUrl, o.backendUrl)
        && equals(purchaseDetailsUrl, o.purchaseDetailsUrl)
        && equals(detailsReusable, o.detailsReusable)
        && equals(subtitle, o.subtitle);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = docid != null ? docid.hashCode() : 0;
      result = result * 37 + (backendDocid != null ? backendDocid.hashCode() : 0);
      result = result * 37 + (docType != null ? docType.hashCode() : 0);
      result = result * 37 + (backendId != null ? backendId.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (creator != null ? creator.hashCode() : 0);
      result = result * 37 + (descriptionHtml != null ? descriptionHtml.hashCode() : 0);
      result = result * 37 + (offer != null ? offer.hashCode() : 1);
      result = result * 37 + (availability != null ? availability.hashCode() : 0);
      result = result * 37 + (image != null ? image.hashCode() : 1);
      result = result * 37 + (child != null ? child.hashCode() : 1);
      result = result * 37 + (containerMetadata != null ? containerMetadata.hashCode() : 0);
      result = result * 37 + (details != null ? details.hashCode() : 0);
      result = result * 37 + (aggregateRating != null ? aggregateRating.hashCode() : 0);
      result = result * 37 + (annotations != null ? annotations.hashCode() : 0);
      result = result * 37 + (detailsUrl != null ? detailsUrl.hashCode() : 0);
      result = result * 37 + (shareUrl != null ? shareUrl.hashCode() : 0);
      result = result * 37 + (reviewsUrl != null ? reviewsUrl.hashCode() : 0);
      result = result * 37 + (backendUrl != null ? backendUrl.hashCode() : 0);
      result = result * 37 + (purchaseDetailsUrl != null ? purchaseDetailsUrl.hashCode() : 0);
      result = result * 37 + (detailsReusable != null ? detailsReusable.hashCode() : 0);
      result = result * 37 + (subtitle != null ? subtitle.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<DocV2> {

    public String docid;
    public String backendDocid;
    public Integer docType;
    public Integer backendId;
    public String title;
    public String creator;
    public String descriptionHtml;
    public List<Offer> offer;
    public Availability availability;
    public List<Image> image;
    public List<DocV2> child;
    public ContainerMetadata containerMetadata;
    public DocumentDetails details;
    public AggregateRating aggregateRating;
    public Annotations annotations;
    public String detailsUrl;
    public String shareUrl;
    public String reviewsUrl;
    public String backendUrl;
    public String purchaseDetailsUrl;
    public Boolean detailsReusable;
    public String subtitle;

    public Builder() {
    }

    public Builder(DocV2 message) {
      super(message);
      if (message == null) return;
      this.docid = message.docid;
      this.backendDocid = message.backendDocid;
      this.docType = message.docType;
      this.backendId = message.backendId;
      this.title = message.title;
      this.creator = message.creator;
      this.descriptionHtml = message.descriptionHtml;
      this.offer = copyOf(message.offer);
      this.availability = message.availability;
      this.image = copyOf(message.image);
      this.child = copyOf(message.child);
      this.containerMetadata = message.containerMetadata;
      this.details = message.details;
      this.aggregateRating = message.aggregateRating;
      this.annotations = message.annotations;
      this.detailsUrl = message.detailsUrl;
      this.shareUrl = message.shareUrl;
      this.reviewsUrl = message.reviewsUrl;
      this.backendUrl = message.backendUrl;
      this.purchaseDetailsUrl = message.purchaseDetailsUrl;
      this.detailsReusable = message.detailsReusable;
      this.subtitle = message.subtitle;
    }

    public Builder docid(String docid) {
      this.docid = docid;
      return this;
    }

    public Builder backendDocid(String backendDocid) {
      this.backendDocid = backendDocid;
      return this;
    }

    public Builder docType(Integer docType) {
      this.docType = docType;
      return this;
    }

    public Builder backendId(Integer backendId) {
      this.backendId = backendId;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder creator(String creator) {
      this.creator = creator;
      return this;
    }

    public Builder descriptionHtml(String descriptionHtml) {
      this.descriptionHtml = descriptionHtml;
      return this;
    }

    public Builder offer(List<Offer> offer) {
      this.offer = checkForNulls(offer);
      return this;
    }

    public Builder availability(Availability availability) {
      this.availability = availability;
      return this;
    }

    public Builder image(List<Image> image) {
      this.image = checkForNulls(image);
      return this;
    }

    public Builder child(List<DocV2> child) {
      this.child = checkForNulls(child);
      return this;
    }

    public Builder containerMetadata(ContainerMetadata containerMetadata) {
      this.containerMetadata = containerMetadata;
      return this;
    }

    public Builder details(DocumentDetails details) {
      this.details = details;
      return this;
    }

    public Builder aggregateRating(AggregateRating aggregateRating) {
      this.aggregateRating = aggregateRating;
      return this;
    }

    public Builder annotations(Annotations annotations) {
      this.annotations = annotations;
      return this;
    }

    public Builder detailsUrl(String detailsUrl) {
      this.detailsUrl = detailsUrl;
      return this;
    }

    public Builder shareUrl(String shareUrl) {
      this.shareUrl = shareUrl;
      return this;
    }

    public Builder reviewsUrl(String reviewsUrl) {
      this.reviewsUrl = reviewsUrl;
      return this;
    }

    public Builder backendUrl(String backendUrl) {
      this.backendUrl = backendUrl;
      return this;
    }

    public Builder purchaseDetailsUrl(String purchaseDetailsUrl) {
      this.purchaseDetailsUrl = purchaseDetailsUrl;
      return this;
    }

    public Builder detailsReusable(Boolean detailsReusable) {
      this.detailsReusable = detailsReusable;
      return this;
    }

    public Builder subtitle(String subtitle) {
      this.subtitle = subtitle;
      return this;
    }

    @Override
    public DocV2 build() {
      return new DocV2(this);
    }
  }
}
