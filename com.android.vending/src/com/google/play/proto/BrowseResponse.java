/*
 * Copyright (c) 2014 Î¼g Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Browse.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class BrowseResponse extends Message {

  public static final String DEFAULT_CONTENTSURL = "";
  public static final String DEFAULT_PROMOURL = "";
  public static final List<BrowseLink> DEFAULT_CATEGORY = Collections.emptyList();
  public static final List<BrowseLink> DEFAULT_BREADCRUMB = Collections.emptyList();
  public static final List<QuickLink> DEFAULT_QUICKLINK = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING)
  public final String contentsUrl;

  @ProtoField(tag = 2, type = STRING)
  public final String promoUrl;

  @ProtoField(tag = 3, label = REPEATED)
  public final List<BrowseLink> category;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<BrowseLink> breadcrumb;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<QuickLink> quickLink;

  public BrowseResponse(String contentsUrl, String promoUrl, List<BrowseLink> category, List<BrowseLink> breadcrumb, List<QuickLink> quickLink) {
    this.contentsUrl = contentsUrl;
    this.promoUrl = promoUrl;
    this.category = immutableCopyOf(category);
    this.breadcrumb = immutableCopyOf(breadcrumb);
    this.quickLink = immutableCopyOf(quickLink);
  }

  private BrowseResponse(Builder builder) {
    this(builder.contentsUrl, builder.promoUrl, builder.category, builder.breadcrumb, builder.quickLink);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BrowseResponse)) return false;
    BrowseResponse o = (BrowseResponse) other;
    return equals(contentsUrl, o.contentsUrl)
        && equals(promoUrl, o.promoUrl)
        && equals(category, o.category)
        && equals(breadcrumb, o.breadcrumb)
        && equals(quickLink, o.quickLink);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = contentsUrl != null ? contentsUrl.hashCode() : 0;
      result = result * 37 + (promoUrl != null ? promoUrl.hashCode() : 0);
      result = result * 37 + (category != null ? category.hashCode() : 1);
      result = result * 37 + (breadcrumb != null ? breadcrumb.hashCode() : 1);
      result = result * 37 + (quickLink != null ? quickLink.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<BrowseResponse> {

    public String contentsUrl;
    public String promoUrl;
    public List<BrowseLink> category;
    public List<BrowseLink> breadcrumb;
    public List<QuickLink> quickLink;

    public Builder() {
    }

    public Builder(BrowseResponse message) {
      super(message);
      if (message == null) return;
      this.contentsUrl = message.contentsUrl;
      this.promoUrl = message.promoUrl;
      this.category = copyOf(message.category);
      this.breadcrumb = copyOf(message.breadcrumb);
      this.quickLink = copyOf(message.quickLink);
    }

    public Builder contentsUrl(String contentsUrl) {
      this.contentsUrl = contentsUrl;
      return this;
    }

    public Builder promoUrl(String promoUrl) {
      this.promoUrl = promoUrl;
      return this;
    }

    public Builder category(List<BrowseLink> category) {
      this.category = checkForNulls(category);
      return this;
    }

    public Builder breadcrumb(List<BrowseLink> breadcrumb) {
      this.breadcrumb = checkForNulls(breadcrumb);
      return this;
    }

    public Builder quickLink(List<QuickLink> quickLink) {
      this.quickLink = checkForNulls(quickLink);
      return this;
    }

    @Override
    public BrowseResponse build() {
      return new BrowseResponse(this);
    }
  }
}
